#!/usr/bin/env node
'use strict';
let fs = require('fs');
require('shelljs/global');
process.env.NODE_CONFIG_DIR = __dirname +'/config';
let config = require('config');

let alias = config.get('alias');
let projectDir = config.get('projectDir');

let aliasString = '';
for (let k in alias) {
    if (Object.prototype.hasOwnProperty.call(alias, k)) {
        let v = alias[k];
        aliasString += '\r\n    ' + k + ': ' + v;
    }
}

let argv = require('yargs')
    .option('p', {
        demand: 'true',
        alias:'project',
        type:'string'
    })
    .option('hard', {
        boolean: true
    })
    .usage('Usage: restart -p [options]')
    .example('restart -p front', 'rebuild and restart the cce-ato-boom-front project. alias: ' + aliasString)

    .help('help')
    .argv;

let __exec__ = command => {
    echo('>> ' + command);
    return exec(command);
};

let hard = argv.hard;

let projectName = alias[argv.project] || argv.project;
projectDir = projectDir || __dirname;
projectDir = projectDir.endsWith('/') ? projectDir : projectDir + '/';
let projectPath = projectDir + projectName;
process.env.NODE_CONFIG_DIR = projectPath + '/config';

if (fs.existsSync(projectPath) && fs.lstatSync(projectPath).isDirectory()) {
    cd(projectPath);

    let gitLog = __exec__('git pull origin master');
    if (hard || gitLog.indexOf('Already up-to-date') == -1) {
        if(hard || gitLog.indexOf('package.json') != -1) {
            __exec__('npm install');
        }
        __exec__('npm run build');
    }

    if (!fs.existsSync(projectDir + 'logs')) {
        fs.mkdirSync(projectDir + 'logs');
    }

    if (!fs.existsSync(projectName + '.js')) {
        __exec__(`ln -s server.js ${ projectName }.js`);
    }

    let pid = findPid();
    if (pid) {
        prompt(`Are you sure kill the pid[${ pid }] and restart the project ${ projectName }? `, () => {
            __exec__(`kill ${ pid }`);
            __exec__(`nohup node ${ projectName } > ${ projectDir }logs/${ projectName }.log 2>&1 &`);
        });
    } else {
        prompt(`Are you sure start the project ${ projectName }? `,() => {
            __exec__(`nohup node ${ projectName } > ${ projectDir }logs/${ projectName }.log 2>&1 &`);
        })
    }
} else {
    echo('No project ' + projectName);
}

function prompt(prompt, callback) {
    echo(`${ prompt } [y/n/yes/no]: `);
    let stdin = process.openStdin();
    stdin.addListener("data", function(d) {
        if (d) {
            let __d__ = d.toString().trim().slice(0, 1).toUpperCase();
            if (__d__ == 'N') exit();
            else if (__d__ == 'Y') {
                callback();
                __exec__('ps -ef | grep ' + projectName);
                echo(`tail -f ${ projectDir }logs/${ projectName }.log`);
                exit();
            } else {
                echo(d.toString());
            }
        }
    });
}

function findPid() {
    let s = __exec__('ps -ef | grep node');
    let pid;
    let logs = s.split('\n');
    logs = logs.filter(log => {
        let temp = log.trim().split(/\s/);
        return temp.includes(projectName) && !temp.includes('-p');
    });
    if (logs.length == 1) {
        let __log__ = logs[0];
        echo(`Find the project ${ projectName }'s log: ${ __log__ }`);
        let __logs__ = __log__.trim().split(/\s+/);
        if (__logs__.length < 2) {
            echo(`Cannot find pid from log: ${ JSON.stringify(__logs__) }`);
        } else {
            pid = __logs__[1];
            echo(`Find the project ${ projectName }'s pid: ${ pid }`);
        }
    } else {
        echo(`Find the project ${ projectName }'s log is illegal: ${ JSON.stringify(logs) }`);
    }

    return pid;
}